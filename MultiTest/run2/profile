Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 51.07      2.44     2.44   119900     0.02     0.02  get_data_at(LLIST*, unsigned int)
 19.26      3.36     0.92   124940     0.01     0.01  find_data(LLIST*, void*)
 14.44      4.05     0.69 313015128     0.00     0.00  compare_vertex(void*, void*)
  3.98      4.24     0.19     8816     0.02     0.02  add_path(vertex*, vertex*, GRAPH*, int)
  3.77      4.42     0.18        1   180.09   180.09  create_graph_gps()
  2.72      4.55     0.13     5000     0.03     0.03  check_dijkstra_state(GRAPH*)
  2.30      4.66     0.11    64929     0.00     0.00  add_node_at(LLIST*, unsigned int, void*)
  2.09      4.76     0.10        1   100.05   100.05  initialize_Dijkstra(GRAPH*, int)
  0.21      4.77     0.01    59970     0.00     0.00  find_data2(LLIST*, void*)
  0.21      4.78     0.01     5000     0.00     0.02  g_insert_vertex_gps(GRAPH*, int, float, float)
  0.00      4.78     0.00   684790     0.00     0.00  arc_compare(void*, void*)
  0.00      4.78     0.00    59970     0.00     0.07  g_insert_arc(GRAPH*, int, int, int)
  0.00      4.78     0.00    30000     0.00     0.14  insert_arc(GRAPH*, int, int, int)
  0.00      4.78     0.00    29959     0.00     0.00  heapInsert(HEAP*, void*)
  0.00      4.78     0.00    29958     0.00     0.00  _reheapUp(HEAP*, int)
  0.00      4.78     0.00    25067     0.00     0.00  heapDelete(HEAP*, void**)
  0.00      4.78     0.00    25067     0.00     0.00  _reheapDown(HEAP*, int)
  0.00      4.78     0.00     5001     0.00     0.00  create_list(int (*)(void*, void*), void (*)(void*))
  0.00      4.78     0.00        1     0.00     0.00  find_data3(LLIST*, void*)
  0.00      4.78     0.00        1     0.00     0.00  heapCreate(int, int (*)(void*, void*))
  0.00      4.78     0.00        1     0.00   420.22  find_shortest_way(GRAPH*, int, int, char**)
  0.00      4.78     0.00        1     0.00   420.22  find_shortest_way_all(GRAPH*, int)
  0.00      4.78     0.00        1     0.00   420.22  g_generate_shortest_path(GRAPH*, int, int, char**)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.21% of 4.78 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    4.78                 main [1]
                0.00    4.10   30000/30000       insert_arc(GRAPH*, int, int, int) [3]
                0.00    0.42       1/1           g_generate_shortest_path(GRAPH*, int, int, char**) [9]
                0.18    0.00       1/1           create_graph_gps() [11]
                0.01    0.07    5000/5000        g_insert_vertex_gps(GRAPH*, int, float, float) [15]
-----------------------------------------------
                0.00    4.10   59970/59970       insert_arc(GRAPH*, int, int, int) [3]
[2]     85.7    0.00    4.10   59970         g_insert_arc(GRAPH*, int, int, int) [2]
                2.44    0.00  119899/119900      get_data_at(LLIST*, unsigned int) [4]
                0.88    0.66  119940/124940      find_data(LLIST*, void*) [5]
                0.10    0.00   59929/64929       add_node_at(LLIST*, unsigned int, void*) [13]
                0.01    0.00   59970/59970       find_data2(LLIST*, void*) [16]
-----------------------------------------------
                0.00    4.10   30000/30000       main [1]
[3]     85.7    0.00    4.10   30000         insert_arc(GRAPH*, int, int, int) [3]
                0.00    4.10   59970/59970       g_insert_arc(GRAPH*, int, int, int) [2]
-----------------------------------------------
                0.00    0.00       1/119900      find_shortest_way_all(GRAPH*, int) [8]
                2.44    0.00  119899/119900      g_insert_arc(GRAPH*, int, int, int) [2]
[4]     51.0    2.44    0.00  119900         get_data_at(LLIST*, unsigned int) [4]
-----------------------------------------------
                0.04    0.03    5000/124940      g_insert_vertex_gps(GRAPH*, int, float, float) [15]
                0.88    0.66  119940/124940      g_insert_arc(GRAPH*, int, int, int) [2]
[5]     33.7    0.92    0.69  124940         find_data(LLIST*, void*) [5]
                0.69    0.00 313015128/313015128     compare_vertex(void*, void*) [6]
-----------------------------------------------
                0.69    0.00 313015128/313015128     find_data(LLIST*, void*) [5]
[6]     14.4    0.69    0.00 313015128         compare_vertex(void*, void*) [6]
-----------------------------------------------
                0.00    0.42       1/1           g_generate_shortest_path(GRAPH*, int, int, char**) [9]
[7]      8.8    0.00    0.42       1         find_shortest_way(GRAPH*, int, int, char**) [7]
                0.00    0.42       1/1           find_shortest_way_all(GRAPH*, int) [8]
-----------------------------------------------
                0.00    0.42       1/1           find_shortest_way(GRAPH*, int, int, char**) [7]
[8]      8.8    0.00    0.42       1         find_shortest_way_all(GRAPH*, int) [8]
                0.19    0.00    8816/8816        add_path(vertex*, vertex*, GRAPH*, int) [10]
                0.13    0.00    5000/5000        check_dijkstra_state(GRAPH*) [12]
                0.10    0.00       1/1           initialize_Dijkstra(GRAPH*, int) [14]
                0.00    0.00       1/119900      get_data_at(LLIST*, unsigned int) [4]
                0.00    0.00   29959/29959       heapInsert(HEAP*, void*) [24]
                0.00    0.00   25067/25067       heapDelete(HEAP*, void**) [26]
                0.00    0.00       1/1           find_data3(LLIST*, void*) [29]
                0.00    0.00       1/1           heapCreate(int, int (*)(void*, void*)) [30]
-----------------------------------------------
                0.00    0.42       1/1           main [1]
[9]      8.8    0.00    0.42       1         g_generate_shortest_path(GRAPH*, int, int, char**) [9]
                0.00    0.42       1/1           find_shortest_way(GRAPH*, int, int, char**) [7]
-----------------------------------------------
                0.19    0.00    8816/8816        find_shortest_way_all(GRAPH*, int) [8]
[10]     4.0    0.19    0.00    8816         add_path(vertex*, vertex*, GRAPH*, int) [10]
-----------------------------------------------
                0.18    0.00       1/1           main [1]
[11]     3.8    0.18    0.00       1         create_graph_gps() [11]
                0.00    0.00       1/5001        create_list(int (*)(void*, void*), void (*)(void*)) [28]
-----------------------------------------------
                0.13    0.00    5000/5000        find_shortest_way_all(GRAPH*, int) [8]
[12]     2.7    0.13    0.00    5000         check_dijkstra_state(GRAPH*) [12]
-----------------------------------------------
                0.01    0.00    5000/64929       g_insert_vertex_gps(GRAPH*, int, float, float) [15]
                0.10    0.00   59929/64929       g_insert_arc(GRAPH*, int, int, int) [2]
[13]     2.3    0.11    0.00   64929         add_node_at(LLIST*, unsigned int, void*) [13]
-----------------------------------------------
                0.10    0.00       1/1           find_shortest_way_all(GRAPH*, int) [8]
[14]     2.1    0.10    0.00       1         initialize_Dijkstra(GRAPH*, int) [14]
-----------------------------------------------
                0.01    0.07    5000/5000        main [1]
[15]     1.7    0.01    0.07    5000         g_insert_vertex_gps(GRAPH*, int, float, float) [15]
                0.04    0.03    5000/124940      find_data(LLIST*, void*) [5]
                0.01    0.00    5000/64929       add_node_at(LLIST*, unsigned int, void*) [13]
                0.00    0.00    5000/5001        create_list(int (*)(void*, void*), void (*)(void*)) [28]
-----------------------------------------------
                0.01    0.00   59970/59970       g_insert_arc(GRAPH*, int, int, int) [2]
[16]     0.2    0.01    0.00   59970         find_data2(LLIST*, void*) [16]
-----------------------------------------------
                0.00    0.00   49377/684790      _reheapUp(HEAP*, int) [25]
                0.00    0.00  635413/684790      _reheapDown(HEAP*, int) [27]
[23]     0.0    0.00    0.00  684790         arc_compare(void*, void*) [23]
-----------------------------------------------
                0.00    0.00   29959/29959       find_shortest_way_all(GRAPH*, int) [8]
[24]     0.0    0.00    0.00   29959         heapInsert(HEAP*, void*) [24]
                0.00    0.00   29958/29958       _reheapUp(HEAP*, int) [25]
-----------------------------------------------
                               19422             _reheapUp(HEAP*, int) [25]
                0.00    0.00   29958/29958       heapInsert(HEAP*, void*) [24]
[25]     0.0    0.00    0.00   29958+19422   _reheapUp(HEAP*, int) [25]
                0.00    0.00   49377/684790      arc_compare(void*, void*) [23]
                               19422             _reheapUp(HEAP*, int) [25]
-----------------------------------------------
                0.00    0.00   25067/25067       find_shortest_way_all(GRAPH*, int) [8]
[26]     0.0    0.00    0.00   25067         heapDelete(HEAP*, void**) [26]
                0.00    0.00   25067/25067       _reheapDown(HEAP*, int) [27]
-----------------------------------------------
                              313627             _reheapDown(HEAP*, int) [27]
                0.00    0.00   25067/25067       heapDelete(HEAP*, void**) [26]
[27]     0.0    0.00    0.00   25067+313627  _reheapDown(HEAP*, int) [27]
                0.00    0.00  635413/684790      arc_compare(void*, void*) [23]
                              313627             _reheapDown(HEAP*, int) [27]
-----------------------------------------------
                0.00    0.00       1/5001        create_graph_gps() [11]
                0.00    0.00    5000/5001        g_insert_vertex_gps(GRAPH*, int, float, float) [15]
[28]     0.0    0.00    0.00    5001         create_list(int (*)(void*, void*), void (*)(void*)) [28]
-----------------------------------------------
                0.00    0.00       1/1           find_shortest_way_all(GRAPH*, int) [8]
[29]     0.0    0.00    0.00       1         find_data3(LLIST*, void*) [29]
-----------------------------------------------
                0.00    0.00       1/1           find_shortest_way_all(GRAPH*, int) [8]
[30]     0.0    0.00    0.00       1         heapCreate(int, int (*)(void*, void*)) [30]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [16] find_data2(LLIST*, void*) [28] create_list(int (*)(void*, void*), void (*)(void*)) [12] check_dijkstra_state(GRAPH*)
  [29] find_data3(LLIST*, void*) [4] get_data_at(LLIST*, unsigned int) [8] find_shortest_way_all(GRAPH*, int)
  [30] heapCreate(int, int (*)(void*, void*)) [2] g_insert_arc(GRAPH*, int, int, int) [9] g_generate_shortest_path(GRAPH*, int, int, char**)
  [26] heapDelete(HEAP*, void**) [6] compare_vertex(void*, void*) [10] add_path(vertex*, vertex*, GRAPH*, int)
  [24] heapInsert(HEAP*, void*) [11] create_graph_gps()    [5] find_data(LLIST*, void*)
   [3] insert_arc(GRAPH*, int, int, int) [7] find_shortest_way(GRAPH*, int, int, char**) [27] _reheapDown(HEAP*, int) (ADT_heap.c)
  [13] add_node_at(LLIST*, unsigned int, void*) [15] g_insert_vertex_gps(GRAPH*, int, float, float) [25] _reheapUp(HEAP*, int) (ADT_heap.c)
  [23] arc_compare(void*, void*) [14] initialize_Dijkstra(GRAPH*, int)
